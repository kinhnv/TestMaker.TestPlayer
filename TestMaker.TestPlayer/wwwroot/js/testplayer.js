/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/models/question.ts":
/*!***********************************!*\
  !*** ./src/ts/models/question.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"QuestionType\": () => (/* binding */ QuestionType)\n/* harmony export */ });\nvar QuestionType;\r\n(function (QuestionType) {\r\n    QuestionType[QuestionType[\"MultipleChoiceQuestion\"] = 1] = \"MultipleChoiceQuestion\";\r\n    QuestionType[QuestionType[\"BlankFillingQuestion\"] = 2] = \"BlankFillingQuestion\";\r\n    QuestionType[QuestionType[\"SortingQuestion\"] = 3] = \"SortingQuestion\";\r\n    QuestionType[QuestionType[\"MatchingQuestion\"] = 4] = \"MatchingQuestion\";\r\n})(QuestionType || (QuestionType = {}));\r\n\n\n//# sourceURL=webpack://asp.net/./src/ts/models/question.ts?");

/***/ }),

/***/ "./src/ts/testplayer/helpers/blank-filling-question.helper.ts":
/*!********************************************************************!*\
  !*** ./src/ts/testplayer/helpers/blank-filling-question.helper.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BlankFillingQuestionHelper\": () => (/* binding */ BlankFillingQuestionHelper)\n/* harmony export */ });\nclass BlankFillingQuestionHelper {\r\n    constructor(params) {\r\n        this.params = params;\r\n    }\r\n    get questionContent() {\r\n        return JSON.parse(this.params.question.questionAsJson);\r\n    }\r\n    getSelectAtHtml(blank, answer) {\r\n        let optionsAsHtml = blank.answers.map(a => `<option value=\"${a}\" ${a == answer ? 'selected=\"selected\"' : ''}>${a}</option>`).join('');\r\n        return `\r\n            <select class=\"js__blank js__${blank.position}\" data-position=\"${blank.position}\">\r\n                ${optionsAsHtml}\r\n            </select>`;\r\n    }\r\n    renderQuestion(answerAsJson) {\r\n        const answers = !answerAsJson ? null : JSON.parse(answerAsJson);\r\n        let question = this.questionContent.question;\r\n        this.questionContent.blanks.forEach(blank => {\r\n            let select = this.getSelectAtHtml(blank, !answers ? null : answers.find(a => a.position == blank.position).answer);\r\n            question = question.replace(blank.position, select);\r\n        });\r\n        this.params.$content.html(`\r\n            <div style=\"margin: 0px auto;\">\r\n                <div class=\"js__question\" style=\"margin-bottom: 24px; font-size: 1.5rem; font-weight: 400; line-height: 1.5;\">\r\n                    ${question}\r\n                </div>\r\n            </div>\r\n        `);\r\n    }\r\n    getCurrentAnswerFromHtml() {\r\n        var result = [];\r\n        this.params.$content.find('.js__blank').each((index, select) => {\r\n            const $select = $(select);\r\n            const position = $select.data('position');\r\n            const answer = $select.find('option:selected').val() + '';\r\n            result.push({\r\n                answer: answer,\r\n                position: position\r\n            });\r\n        });\r\n        return result.sort((a, b) => {\r\n            if (a.position < b.position) {\r\n                return -1;\r\n            }\r\n            if (a.position > b.position) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://asp.net/./src/ts/testplayer/helpers/blank-filling-question.helper.ts?");

/***/ }),

/***/ "./src/ts/testplayer/helpers/matching-question.helper.ts":
/*!***************************************************************!*\
  !*** ./src/ts/testplayer/helpers/matching-question.helper.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MatchingQuestionHelper\": () => (/* binding */ MatchingQuestionHelper)\n/* harmony export */ });\nclass MatchingQuestionHelper {\r\n    constructor(params) {\r\n        this.params = params;\r\n        this.from = 0;\r\n    }\r\n    get questionContent() {\r\n        return JSON.parse(this.params.question.questionAsJson);\r\n    }\r\n    renderQuestion(answerAsJson) {\r\n        const answers = !answerAsJson ? null : JSON.parse(answerAsJson);\r\n        this.params.$content.html(`\r\n            <div style=\"margin: 0px auto;\">\r\n                <div class=\"js__question\" style=\"margin-bottom: 24px; font-size: 1.5rem; font-weight: 400; line-height: 1.5;\">\r\n                    ${this.questionContent.question}\r\n                </div>\r\n                <div class=\"js__answers\">\r\n                    ${this.questionContent.answers.map(answer => `\r\n                        <div class=\"js__answer js__answer-from\" \r\n                            style=\"border-bottom: 1px solid #c3c3c3;padding: 8px;margin-bottom:4px;width: calc(50% - 2px);margin-right: 4px;float: left;\">\r\n                            <span class=\"js__answer-content\" style=\"padding: 3px 0px;text-align: justify;\">\r\n                                ${answer.from}\r\n                            </span>\r\n                        </div>\r\n                        <div class=\"js__answer js__answer-target\"\r\n                            style=\"border: 1px solid #c3c3c3;padding: 8px;border-radius: 4px;margin-bottom:4px;width: calc(50% - 2px);float: left;\">\r\n                            <span class=\"js__answer-content\" style=\"padding: 3px 0px;text-align: justify;\">\r\n                                ${answers && answers.find(x => x.from == answer.from) ? answers.find(x => x.from == answer.from).target : answer.target}\r\n                            </span>\r\n                        </div>\r\n                        <div style=\"clear: left;\"></div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n        `);\r\n        $('.js__answer-target').click((event) => {\r\n            const $answerElement = $(event.target);\r\n            if ($('.js__answer-selected').length) {\r\n                const $answerSelectedElement = $('.js__answer-selected');\r\n                const answer = $answerSelectedElement.find('.js__answer-content').html();\r\n                $answerSelectedElement.find('.js__answer-content').html($answerElement.find('.js__answer-content').html());\r\n                $answerElement.find('.js__answer-content').html(answer);\r\n                $answerSelectedElement.removeClass('js__answer-selected');\r\n                $answerSelectedElement.css('background-color', 'white');\r\n            }\r\n            else {\r\n                $answerElement.addClass('js__answer-selected');\r\n                $answerElement.css('background-color', '#c3c3c3');\r\n            }\r\n        });\r\n    }\r\n    getCurrentAnswerFromHtml() {\r\n        const result = [];\r\n        const from = this.params.$content.find('.js__answer-from').find('.js__answer-content').map((index, element) => $(element).html().trim());\r\n        const target = this.params.$content.find('.js__answer-target').find('.js__answer-content').map((index, element) => $(element).html().trim());\r\n        this.params.$content.find('.js__answer-from').each((index) => {\r\n            result.push({\r\n                from: from[index],\r\n                target: target[index]\r\n            });\r\n        });\r\n        return result.sort((a, b) => {\r\n            if (a.from < b.from) {\r\n                return -1;\r\n            }\r\n            if (a.from > b.from) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://asp.net/./src/ts/testplayer/helpers/matching-question.helper.ts?");

/***/ }),

/***/ "./src/ts/testplayer/helpers/multiple-choice-question.helper.ts":
/*!**********************************************************************!*\
  !*** ./src/ts/testplayer/helpers/multiple-choice-question.helper.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MultipleChoiceQuestionHelper\": () => (/* binding */ MultipleChoiceQuestionHelper)\n/* harmony export */ });\nclass MultipleChoiceQuestionHelper {\r\n    constructor(params) {\r\n        this.params = params;\r\n    }\r\n    get questionContent() {\r\n        return JSON.parse(this.params.question.questionAsJson);\r\n    }\r\n    renderQuestion(answerAsJson) {\r\n        let answers = answerAsJson ? JSON.parse(answerAsJson) : [];\r\n        let answersAsHtml = '';\r\n        this.questionContent.answers.forEach(a => {\r\n            if (answers.indexOf(a) >= 0 && answers.length) {\r\n                answersAsHtml += `\r\n                <div class=\"form-group\">\r\n                    <input\r\n                        type=\"${this.questionContent.isSingleChoice ? 'radio' : 'checkbox'}\" \r\n                        style=\"float: left; height: 24px; width: 24px; margin-right: 10px; box-shadow: none;\"\r\n                        value=\"${a}\" checked=\"checked\" name=\"answer\" class=\"form-control\" /> \r\n                    <span>${a}</span>\r\n                </div>`;\r\n            }\r\n            else {\r\n                answersAsHtml += `\r\n                <div class=\"form-group\">\r\n                    <input \r\n                        type=\"${this.questionContent.isSingleChoice ? 'radio' : 'checkbox'}\" \r\n                        style=\"float: left; height: 24px; width: 24px; margin-right: 10px; box-shadow: none;\"\r\n                        value=\"${a}\" name=\"answer\" class=\"form-control\" /> \r\n                    <span>${a}</span>\r\n                </div>`;\r\n            }\r\n        });\r\n        this.params.$content.html(`\r\n            <div style=\"margin: 0px auto;\">\r\n                <div class=\"js__question\" style=\"margin-bottom: 24px; font-size: 1.5rem; font-weight: 400; line-height: 1.5;\">\r\n                    ${this.questionContent.question}\r\n                </div>\r\n                <div class=\"js__answers\">\r\n                    ${answersAsHtml}\r\n                </div>\r\n            </div>\r\n        `);\r\n    }\r\n    getCurrentAnswerFromHtml() {\r\n        if ($('.js__answers').find('input:checked').length) {\r\n            let result = [];\r\n            for (var i = 0; i < $('.js__answers').find('input:checked').length; i++) {\r\n                result.push($($('.js__answers').find('input:checked')[i]).val());\r\n            }\r\n            return result;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://asp.net/./src/ts/testplayer/helpers/multiple-choice-question.helper.ts?");

/***/ }),

/***/ "./src/ts/testplayer/helpers/sorting-question.helper.ts":
/*!**************************************************************!*\
  !*** ./src/ts/testplayer/helpers/sorting-question.helper.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SortingQuestionHelper\": () => (/* binding */ SortingQuestionHelper)\n/* harmony export */ });\nclass SortingQuestionHelper {\r\n    constructor(params) {\r\n        this.params = params;\r\n    }\r\n    get questionContent() {\r\n        return JSON.parse(this.params.question.questionAsJson);\r\n    }\r\n    renderQuestion(answerAsJson) {\r\n        const answers = !answerAsJson ? null : JSON.parse(answerAsJson);\r\n        this.params.$content.html(`\r\n            <div style=\"margin: 0px auto;\">\r\n                <div class=\"js__question\" style=\"margin-bottom: 24px; font-size: 1.5rem; font-weight: 400; line-height: 1.5;\">\r\n                    ${this.questionContent.question}\r\n                </div>\r\n                <div class=\"js__answers\">\r\n                    ${(answers !== null && answers !== void 0 ? answers : this.questionContent.answers).map(answer => `\r\n                        <div class=\"js__answer\" \r\n                            style=\"border: 1px solid #c3c3c3;padding: 8px;border-radius: 4px;margin-bottom:4px;\">\r\n                            <span class=\"js__answer-content\" style=\"padding: 3px 0px;text-align: justify;\">\r\n                                ${answer}\r\n                            </span>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n        `);\r\n        $('.js__answer').click((event) => {\r\n            const $answerElement = $(event.target);\r\n            if ($('.js__answer-selected').length) {\r\n                const $answerSelectedElement = $('.js__answer-selected');\r\n                const answer = $answerSelectedElement.find('.js__answer-content').html();\r\n                $answerSelectedElement.find('.js__answer-content').html($answerElement.find('.js__answer-content').html());\r\n                $answerElement.find('.js__answer-content').html(answer);\r\n                $answerSelectedElement.removeClass('js__answer-selected');\r\n                $answerSelectedElement.css('background-color', 'white');\r\n            }\r\n            else {\r\n                $answerElement.addClass('js__answer-selected');\r\n                $answerElement.css('background-color', '#c3c3c3');\r\n            }\r\n        });\r\n    }\r\n    getCurrentAnswerFromHtml() {\r\n        const result = [];\r\n        this.params.$content.find('.js__answer-content').each((index, answerContentElement) => {\r\n            result.push($(answerContentElement).html().trim());\r\n        });\r\n        return result.sort((a, b) => {\r\n            if (a < b) {\r\n                return -1;\r\n            }\r\n            if (a > b) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        ;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://asp.net/./src/ts/testplayer/helpers/sorting-question.helper.ts?");

/***/ }),

/***/ "./src/ts/testplayer/index.ts":
/*!************************************!*\
  !*** ./src/ts/testplayer/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _models_question__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/question */ \"./src/ts/models/question.ts\");\n/* harmony import */ var _helpers_sorting_question_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/sorting-question.helper */ \"./src/ts/testplayer/helpers/sorting-question.helper.ts\");\n/* harmony import */ var _helpers_multiple_choice_question_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/multiple-choice-question.helper */ \"./src/ts/testplayer/helpers/multiple-choice-question.helper.ts\");\n/* harmony import */ var _helpers_blank_filling_question_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/blank-filling-question.helper */ \"./src/ts/testplayer/helpers/blank-filling-question.helper.ts\");\n/* harmony import */ var _helpers_matching_question_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/matching-question.helper */ \"./src/ts/testplayer/helpers/matching-question.helper.ts\");\n\r\n\r\n\r\n\r\n\r\nclass TestPlayerController {\r\n    constructor(params) {\r\n        this.params = params;\r\n        this.data = null;\r\n        this.questionHelper = null;\r\n        var code = this.getCookie('ACCESS_CODE');\r\n        if (code) {\r\n            var codeAsArray = code.split('_');\r\n            $.ajax({\r\n                method: 'POST',\r\n                url: this.params.getPreparedCandidateByCodeUrl,\r\n                data: {\r\n                    eventCode: codeAsArray[0],\r\n                    candidateCode: codeAsArray[1]\r\n                }\r\n            }).then((data) => {\r\n                this.data = data;\r\n                if (data) {\r\n                    $('.js__test-name').html(data.test.name);\r\n                    if (this.isSummary) {\r\n                        this.renderSummary();\r\n                    }\r\n                    else {\r\n                        this.renderCurrentQuestion();\r\n                    }\r\n                }\r\n            });\r\n            $('.js__next-question').click((event) => {\r\n                this.submitCurrentQuestion().then(() => {\r\n                    location.href = this.getQuestionHerf(this.nextQuestion.questionId);\r\n                    this.renderCurrentQuestion();\r\n                });\r\n            });\r\n            $('.js__prevent-question').click((event) => {\r\n                this.submitCurrentQuestion().then(() => {\r\n                    location.href = this.getQuestionHerf(this.preventQuestion.questionId);\r\n                    this.renderCurrentQuestion();\r\n                });\r\n            });\r\n            $('.js__summary, .js__test-name').click((event) => {\r\n                this.submitCurrentQuestion().then(() => {\r\n                    location.href = location.href.replace(location.hash, '') + '#summary';\r\n                    this.renderSummary();\r\n                });\r\n            });\r\n        }\r\n    }\r\n    get $ContentElement() {\r\n        return $('.js__container');\r\n    }\r\n    get isSummary() {\r\n        return location.hash.replace('#', '').indexOf('summary') >= 0;\r\n    }\r\n    get test() {\r\n        return this.data.test;\r\n    }\r\n    get candidateId() {\r\n        return this.data.candidateId;\r\n    }\r\n    get currentSection() {\r\n        var currentQuestionId = null;\r\n        let params = location.hash.replace('#', '').split('&').filter(x => x.startsWith('questionId'));\r\n        if (params.length)\r\n            currentQuestionId = params[0].split('=')[1];\r\n        if (!this.test)\r\n            return null;\r\n        if (this.test.sections && this.test.sections.length) {\r\n            var section = this.test.sections[0];\r\n            if (currentQuestionId) {\r\n                for (var i = 0; i < this.test.sections.length; i++) {\r\n                    var length = this.test.sections[i].questions.filter(x => x.questionId == currentQuestionId).length;\r\n                    if (length) {\r\n                        section = this.test.sections[i];\r\n                    }\r\n                }\r\n            }\r\n            return section;\r\n        }\r\n        return null;\r\n    }\r\n    get currentQuestion() {\r\n        var currentQuestionId = null;\r\n        let params = location.hash.replace('#', '').split('&').filter(x => x.startsWith('questionId'));\r\n        if (params.length)\r\n            currentQuestionId = params[0].split('=')[1];\r\n        if (this.currentSection) {\r\n            var question = this.currentSection.questions[0];\r\n            if (this.currentSection.questions && this.currentSection.questions.length) {\r\n                if (currentQuestionId) {\r\n                    question = this.currentSection.questions.filter(x => x.questionId == currentQuestionId)[0];\r\n                }\r\n            }\r\n            return question;\r\n        }\r\n        return null;\r\n    }\r\n    get nextQuestion() {\r\n        let questions = this.currentSection.questions;\r\n        let index = questions.findIndex(x => x.questionId == this.currentQuestion.questionId);\r\n        if (index < questions.length - 1) {\r\n            return questions[index + 1];\r\n        }\r\n        return null;\r\n    }\r\n    get preventQuestion() {\r\n        let questions = this.currentSection.questions;\r\n        let index = questions.findIndex(x => x.questionId == this.currentQuestion.questionId);\r\n        if (index > 0) {\r\n            return questions[index - 1];\r\n        }\r\n        return null;\r\n    }\r\n    renderCurrentQuestion() {\r\n        let currentQuestion = this.currentQuestion;\r\n        if (this.preventQuestion) {\r\n            $('.js__prevent-question').show();\r\n        }\r\n        else {\r\n            $('.js__prevent-question').hide();\r\n        }\r\n        if (this.nextQuestion) {\r\n            $('.js__summary').hide();\r\n            $('.js__next-question').show();\r\n        }\r\n        else {\r\n            $('.js__next-question').hide();\r\n            $('.js__summary').show();\r\n        }\r\n        switch (currentQuestion.type) {\r\n            case _models_question__WEBPACK_IMPORTED_MODULE_0__.QuestionType.MultipleChoiceQuestion: {\r\n                this.questionHelper = new _helpers_multiple_choice_question_helper__WEBPACK_IMPORTED_MODULE_2__.MultipleChoiceQuestionHelper({\r\n                    question: currentQuestion,\r\n                    $content: $('.js__container')\r\n                });\r\n                break;\r\n            }\r\n            case _models_question__WEBPACK_IMPORTED_MODULE_0__.QuestionType.BlankFillingQuestion: {\r\n                this.questionHelper = new _helpers_blank_filling_question_helper__WEBPACK_IMPORTED_MODULE_3__.BlankFillingQuestionHelper({\r\n                    question: currentQuestion,\r\n                    $content: $('.js__container')\r\n                });\r\n                break;\r\n            }\r\n            case _models_question__WEBPACK_IMPORTED_MODULE_0__.QuestionType.MatchingQuestion: {\r\n                this.questionHelper = new _helpers_matching_question_helper__WEBPACK_IMPORTED_MODULE_4__.MatchingQuestionHelper({\r\n                    question: currentQuestion,\r\n                    $content: $('.js__container')\r\n                });\r\n                break;\r\n            }\r\n            case _models_question__WEBPACK_IMPORTED_MODULE_0__.QuestionType.SortingQuestion: {\r\n                this.questionHelper = new _helpers_sorting_question_helper__WEBPACK_IMPORTED_MODULE_1__.SortingQuestionHelper({\r\n                    question: currentQuestion,\r\n                    $content: $('.js__container')\r\n                });\r\n                break;\r\n            }\r\n        }\r\n        this.getCurrentAnswerFromServer().then(answerAsJson => {\r\n            if (currentQuestion.media) {\r\n                $('.js__media').html(`\r\n                <audio controls>\r\n                  <source src=\"${currentQuestion.media}\" type=\"audio/mpeg\">\r\n                Your browser does not support the audio element.\r\n                </audio>\r\n            `);\r\n            }\r\n            this.questionHelper.renderQuestion(answerAsJson);\r\n        });\r\n    }\r\n    getCurrentAnswerFromServer() {\r\n        return new Promise((resolve, reject) => {\r\n            $.ajax({\r\n                method: 'GET',\r\n                url: this.params.getAnswerUrl,\r\n                data: {\r\n                    candidateId: this.candidateId,\r\n                    questionId: this.currentQuestion.questionId\r\n                }\r\n            }).then(answer => {\r\n                resolve(answer);\r\n            });\r\n        });\r\n    }\r\n    submitCurrentQuestion() {\r\n        return new Promise((resolve, reject) => {\r\n            let answer = this.getCurrentAnswerAsJson();\r\n            if (answer) {\r\n                return $.ajax({\r\n                    method: 'POST',\r\n                    url: this.params.submitQuestionUrl,\r\n                    data: {\r\n                        candidateId: this.candidateId,\r\n                        questionId: this.currentQuestion.questionId,\r\n                        answerAsJson: answer\r\n                    }\r\n                }).then(() => {\r\n                    resolve();\r\n                });\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n    getCurrentAnswerAsJson() {\r\n        var answer = this.questionHelper.getCurrentAnswerFromHtml();\r\n        if (answer) {\r\n            return JSON.stringify(answer);\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    renderSummary() {\r\n        $('.js__prevent-question').hide();\r\n        $('.js__next-question').hide();\r\n        $('.js__summary').hide();\r\n        $.ajax({\r\n            method: 'GET',\r\n            url: this.params.getAnswersUrl,\r\n            data: {\r\n                candidateId: this.candidateId\r\n            }\r\n        }).then((answers) => {\r\n            var html = '';\r\n            this.test.sections.forEach(section => {\r\n                var questionsAsHtml = '';\r\n                section.questions.forEach((question, index) => {\r\n                    let backgroundColor = '';\r\n                    let answer = answers.find(x => x.questionId == question.questionId);\r\n                    if (answer) {\r\n                        backgroundColor = 'background: #adb5bd';\r\n                    }\r\n                    else {\r\n                        backgroundColor = '';\r\n                    }\r\n                    questionsAsHtml += `<a class=\"js__go-to-question\" data-question-id=\"${question.questionId}\" style=\"padding: 8px 8px;box-sizing: content-box;display: inline-block;width: 24px;text-align: center;${backgroundColor};border: solid 1px #adb5bd;border-radius: 50%;margin: 5px; cursor: pointer;\">${index + 1}</a>`;\r\n                });\r\n                html += `\r\n                    <div>\r\n                        <div>\r\n                            <h3>Section 1</h3>\r\n                        </div>\r\n                        <div>\r\n                            ${questionsAsHtml}\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"text-align: center\">\r\n                        <a class=\"btn btn-light js__mark-question\" style=\"cursor: pointer\">Mark</a>\r\n                        <a class=\"btn btn-light js__submit\" style=\"cursor: pointer\">Submit</a>\r\n                        <a class=\"btn btn-light js__clear\" style=\"cursor: pointer\">Clear</a>\r\n                    </div>`;\r\n            });\r\n            this.$ContentElement.html(html);\r\n            $('.js__go-to-question').click((event) => {\r\n                let questionId = $(event.target).data('question-id');\r\n                location.href = this.getQuestionHerf(questionId);\r\n                this.renderCurrentQuestion();\r\n            });\r\n            $('.js__mark-question').click((event) => {\r\n                this.mark();\r\n            });\r\n            $('.js__submit').click((event) => {\r\n                $.ajax({\r\n                    method: 'POST',\r\n                    url: this.params.submitUrl,\r\n                    data: {\r\n                        candidateId: this.candidateId\r\n                    }\r\n                }).then(() => {\r\n                    location.href = this.params.homeUrl;\r\n                });\r\n            });\r\n            $('.js__clear').click((event) => {\r\n                $.ajax({\r\n                    method: 'POST',\r\n                    url: this.params.clearUrl,\r\n                    data: {\r\n                        candidateId: this.candidateId\r\n                    }\r\n                }).then(() => {\r\n                    let url = new URL(location.href);\r\n                    location.href = url.href.replace(url.hash, '');\r\n                });\r\n            });\r\n        });\r\n    }\r\n    mark() {\r\n        $.ajax({\r\n            method: 'GET',\r\n            url: this.params.getCorrectAnswersUrl,\r\n            data: {\r\n                testId: this.test.testId\r\n            }\r\n        }).then((correctAnswers) => {\r\n            $.ajax({\r\n                method: 'GET',\r\n                url: this.params.getAnswersUrl,\r\n                data: {\r\n                    candidateId: this.candidateId\r\n                }\r\n            }).then((answers) => {\r\n                let result = [];\r\n                answers.forEach(answer => {\r\n                    correctAnswers.forEach(correctAnswer => {\r\n                        if (answer.questionId == correctAnswer.questionId) {\r\n                            if (answer.answerAsJson == correctAnswer.answerAsJson) {\r\n                                result.push({\r\n                                    questionId: answer.questionId,\r\n                                    isCorrect: true\r\n                                });\r\n                            }\r\n                            else {\r\n                                result.push({\r\n                                    questionId: answer.questionId,\r\n                                    isCorrect: false\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n                $.ajax({\r\n                    method: 'POST',\r\n                    url: this.params.saveQuestionResultUrl,\r\n                    data: result\r\n                });\r\n                $('.js__go-to-question').each((index, element) => {\r\n                    let questionId = $(element).data('question-id');\r\n                    let resultItem = result.find(x => x.questionId == questionId);\r\n                    if (resultItem) {\r\n                        if (!resultItem.isCorrect) {\r\n                            $(element).css('background', '#dc3545');\r\n                        }\r\n                        else {\r\n                            $(element).css('background', '#28a745');\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    getQuestionHerf(questionId) {\r\n        return location.href.replace(location.hash, '') + '#questionId=' + questionId;\r\n    }\r\n    getCookie(cname) {\r\n        let name = cname + \"=\";\r\n        let decodedCookie = decodeURIComponent(document.cookie);\r\n        let ca = decodedCookie.split(';');\r\n        for (let i = 0; i < ca.length; i++) {\r\n            let c = ca[i];\r\n            while (c.charAt(0) == ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) == 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n}\r\nif ($('[test-player-params]')) {\r\n    let paramsAsJson = $('[test-player-params]').attr('test-player-params');\r\n    let params = JSON.parse(paramsAsJson);\r\n    new TestPlayerController(params);\r\n}\r\n\n\n//# sourceURL=webpack://asp.net/./src/ts/testplayer/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ts/testplayer/index.ts");
/******/ 	
/******/ })()
;