/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/sw.ts":
/*!*******************!*\
  !*** ./src/sw.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ts_requesthandler_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ts/requesthandler/index */ \"./src/ts/requesthandler/index.ts\");\n/// <reference no-default-lib=\"false\"/>\n/// <reference lib=\"ES2015\" />\n/// <reference lib=\"webworker\" />\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nlet VERSION = 1;\nlet CACHE_NAME = `CACHE_NAME_V${VERSION}`;\nself.addEventListener('install', (event) => __awaiter(void 0, void 0, void 0, function* () {\n    let cache = yield caches.open(CACHE_NAME);\n    cache.addAll([\n        \"./lib/bootstrap/dist/css/bootstrap.min.css\",\n        \"./css/site.css\",\n        \"./lib/jquery/dist/jquery.min.js\",\n        \"./lib/bootstrap/dist/js/bootstrap.bundle.min.js\",\n        \"./favicon.ico\",\n        \"/\",\n        \"./js/home.js\",\n        \"/TestPlayer\",\n        \"./js/testplayer.js\",\n        \"/Events\",\n        \"./js/events.js\",\n    ]);\n}));\nself.addEventListener('fetch', (event) => __awaiter(void 0, void 0, void 0, function* () {\n    function handleRequest() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let requestClone = event.request.clone();\n            let cache = yield caches.open(CACHE_NAME);\n            let response = yield (new _ts_requesthandler_index__WEBPACK_IMPORTED_MODULE_0__.RequestHandler({\n                isOnline: navigator.onLine,\n                version: VERSION,\n                requestClone: requestClone,\n                cache: cache\n            }).handleAsync());\n            if (response) {\n                return response;\n            }\n            else {\n                if (!navigator.onLine) {\n                    return yield cache.match(requestClone);\n                }\n                else {\n                    return yield fetch(requestClone);\n                }\n            }\n        });\n    }\n    event.respondWith(handleRequest());\n}));\n\n\n//# sourceURL=webpack://asp.net/./src/sw.ts?");

/***/ }),

/***/ "./src/ts/requesthandler/index.ts":
/*!****************************************!*\
  !*** ./src/ts/requesthandler/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RequestHandler\": () => (/* binding */ RequestHandler)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass RequestHandler {\n    constructor(params) {\n        this.params = params;\n        this.DB_NAME = 'TestPlayer';\n        this.CANDIDATES_TABLE = 'Candidates';\n        this.CANDIDATE_ANSWER_TABLE = 'CandidateAnswers';\n    }\n    get url() {\n        return this.params.requestClone.url;\n    }\n    get path() {\n        return (new URL(this.url)).pathname;\n    }\n    get isPost() {\n        return this.params.requestClone.method == 'POST';\n    }\n    handleAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.params.isOnline) {\n                switch (this.path) {\n                    case '/Events/GetPublicEventsAndCandidates':\n                        if (!this.isPost) {\n                            let response = yield fetch(this.params.requestClone);\n                            let data = yield response.clone().json();\n                            let dataFromIndexdDB = yield this.getAllObjectAsync(this.CANDIDATES_TABLE);\n                            dataFromIndexdDB.forEach(itemFromIndexdDB => {\n                                let items = data.filter(i => i.eventCode == itemFromIndexdDB.data.eventCode && i.candidateCode == itemFromIndexdDB.data.candidateCode);\n                                if (items.length == 1) {\n                                    items[0].test = itemFromIndexdDB.data.test;\n                                }\n                                else {\n                                    data.push(itemFromIndexdDB.data);\n                                }\n                            });\n                            return new Response(JSON.stringify(data), {\n                                headers: { 'Content-Type': 'application/json' }\n                            });\n                        }\n                        return null;\n                    case '/TestPlayer/Events/Prepare':\n                        if (this.isPost) {\n                            let response = yield fetch(this.params.requestClone);\n                            let data = yield response.clone().json();\n                            if (data) {\n                                this.addOrPutObjectAsync(this.CANDIDATES_TABLE, {\n                                    key: `${data.eventCode}_${data.candidateCode}`,\n                                    data: data,\n                                    LastUpdate: new Date()\n                                });\n                            }\n                            return response;\n                        }\n                        return null;\n                    case '/TestPlayer/SubmitQuestion':\n                        if (this.isPost) {\n                            let candidateAnswer = yield this.params.requestClone.clone().formData();\n                            yield this.addOrPutObjectAsync(this.CANDIDATE_ANSWER_TABLE, {\n                                key: `${candidateAnswer.get('candidateId').toString()}_${candidateAnswer.get('questionId').toString()}`,\n                                data: {\n                                    candidateId: candidateAnswer.get('candidateId').toString(),\n                                    questionId: candidateAnswer.get('questionId').toString(),\n                                    answerAsJson: candidateAnswer.get('answerAsJson').toString()\n                                },\n                                LastUpdate: new Date()\n                            });\n                            return yield fetch(this.params.requestClone);\n                        }\n                        else {\n                            return null;\n                        }\n                    default:\n                        return null;\n                }\n                ;\n            }\n            else {\n                switch (this.path) {\n                    case '/TestPlayer/GetPreparedCandidateByCode':\n                        let text = yield this.params.requestClone.text();\n                        let eventCode = text.split('&')[0].split('=')[1];\n                        let candidateCode = text.split('&')[1].split('=')[1];\n                        let data = yield this.getObjectAsync(this.CANDIDATES_TABLE, `${eventCode}_${candidateCode}`);\n                        return new Response(JSON.stringify(data.data), {\n                            headers: { 'Content-Type': 'application/json' }\n                        });\n                    case '/Events/GetPublicEventsAndCandidates':\n                        if (!this.isPost) {\n                            let dataFromIndexdDB = yield this.getAllObjectAsync(this.CANDIDATES_TABLE);\n                            return new Response(JSON.stringify(dataFromIndexdDB.map(i => i.data)), {\n                                headers: { 'Content-Type': 'application/json' }\n                            });\n                        }\n                        return null;\n                    case '/TestPlayer/SubmitQuestion':\n                        if (this.isPost) {\n                            let candidateAnswer = yield this.params.requestClone.formData();\n                            let candidateId = candidateAnswer.get('candidateId').toString();\n                            let questionId = candidateAnswer.get('questionId').toString();\n                            let answerAsJson = candidateAnswer.get('answerAsJson').toString();\n                            var answers = yield this.getObjectAsync(this.CANDIDATE_ANSWER_TABLE, candidateId);\n                            if (answers) {\n                                let answer = answers.data.filter(x => x.questionId == questionId);\n                                if (answer.length == 0) {\n                                    answers.data.push({\n                                        questionId: questionId,\n                                        answerAsJson: answerAsJson\n                                    });\n                                }\n                                else {\n                                    answer[0].answerAsJson = answerAsJson;\n                                }\n                            }\n                            else {\n                                answers = {\n                                    key: candidateId,\n                                    data: [{\n                                            questionId: questionId,\n                                            answerAsJson: answerAsJson\n                                        }],\n                                    LastUpdate: new Date()\n                                };\n                            }\n                            yield this.addOrPutObjectAsync(this.CANDIDATE_ANSWER_TABLE, answers);\n                            return new Response(JSON.stringify(null), {\n                                headers: { 'Content-Type': 'application/json' }\n                            });\n                        }\n                        else {\n                            return null;\n                        }\n                    case '/TestPlayer/GetAnswer':\n                        if (this.isPost) {\n                            return null;\n                        }\n                        else {\n                            let url = new URL(this.params.requestClone.clone().url);\n                            let candidateId = url.searchParams.get('candidateId');\n                            let questionId = url.searchParams.get('questionId');\n                            let data = yield this.getObjectAsync(this.CANDIDATE_ANSWER_TABLE, candidateId);\n                            if (data) {\n                                let answerAsJson = data.data.filter(x => x.questionId == questionId);\n                                if (answerAsJson.length == 1) {\n                                    return new Response(JSON.stringify(answerAsJson[0].answerAsJson), {\n                                        headers: { 'Content-Type': 'application/json' }\n                                    });\n                                }\n                                else {\n                                    return new Response(JSON.stringify(null), {\n                                        headers: { 'Content-Type': 'application/json' }\n                                    });\n                                }\n                            }\n                            else {\n                                return new Response(JSON.stringify(null), {\n                                    headers: { 'Content-Type': 'application/json' }\n                                });\n                            }\n                        }\n                    case '/TestPlayer/GetAnswers':\n                        if (this.isPost) {\n                            return null;\n                        }\n                        else {\n                            let url = new URL(this.params.requestClone.clone().url);\n                            let candidateId = url.searchParams.get('candidateId');\n                            let indexedDBObject = yield this.getObjectAsync(this.CANDIDATE_ANSWER_TABLE, candidateId);\n                            if (indexedDBObject) {\n                                return new Response(JSON.stringify(indexedDBObject.data.map(indexedDBObject => {\n                                    return {\n                                        candidateId: candidateId,\n                                        questionId: indexedDBObject.questionId,\n                                        answerAsJson: indexedDBObject.answerAsJson\n                                    };\n                                })), {\n                                    headers: { 'Content-Type': 'application/json' }\n                                });\n                            }\n                            else {\n                                return new Response(JSON.stringify(null), {\n                                    headers: { 'Content-Type': 'application/json' }\n                                });\n                            }\n                        }\n                    default:\n                        return null;\n                }\n                ;\n            }\n        });\n    }\n    openIndexdDBAsync() {\n        return new Promise((resolve, error) => {\n            var request = indexedDB.open(this.DB_NAME, this.params.version);\n            request.onerror = function (message) {\n                error(message);\n            };\n            request.onupgradeneeded = function (event) {\n                let database = event.target.result;\n                database.createObjectStore(\"Candidates\", { keyPath: \"key\" });\n                database.createObjectStore(\"CandidateAnswers\", { keyPath: \"key\" });\n            };\n            request.onsuccess = function (event) {\n                resolve(event.target.result);\n            };\n        });\n    }\n    addOrPutObjectAsync(tableName, object) {\n        return new Promise((resolve, reject) => {\n            this.openIndexdDBAsync().then(database => {\n                let transaction = database.transaction(tableName, \"readwrite\");\n                let objectStore = transaction.objectStore(tableName);\n                objectStore.get(object.key).onsuccess = (getEvent) => {\n                    var savedObject = getEvent.target.result;\n                    if (savedObject) {\n                        objectStore.put(object).onsuccess = () => {\n                            resolve(object);\n                        };\n                    }\n                    else {\n                        objectStore.add(object).onsuccess = () => {\n                            resolve(object);\n                        };\n                    }\n                };\n            });\n        });\n    }\n    getObjectAsync(tableName, key) {\n        return new Promise((resolve, reject) => {\n            this.openIndexdDBAsync().then(database => {\n                let transaction = database.transaction(tableName, \"readonly\");\n                transaction.objectStore(tableName).get(key).onsuccess = (event) => {\n                    resolve(event.target.result);\n                };\n            });\n        });\n    }\n    getAllObjectAsync(tableName, index, query, count) {\n        return new Promise(resolve => {\n            this.openIndexdDBAsync().then(database => {\n                let transaction = database.transaction(tableName, \"readonly\");\n                if (index) {\n                    transaction.objectStore(tableName).getAll(query, count).onsuccess = (event) => {\n                        resolve(event.target.result);\n                    };\n                }\n                else {\n                    transaction.objectStore(tableName).getAll(query, count).onsuccess = (event) => {\n                        resolve(event.target.result);\n                    };\n                }\n            });\n        });\n    }\n}\n\n\n//# sourceURL=webpack://asp.net/./src/ts/requesthandler/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/sw.ts");
/******/ 	
/******/ })()
;